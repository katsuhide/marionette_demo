// Generated by CoffeeScript 1.7.1
'use strict';
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TodoMVC.module('Layout', function(Layout, App, Backbone) {
  Layout.Header = (function(_super) {
    __extends(Header, _super);

    function Header() {
      return Header.__super__.constructor.apply(this, arguments);
    }

    Header.prototype.template = '#template-header';

    Header.prototype.ui = {
      input: '#new-todo'
    };

    Header.prototype.events = {
      'keypress #new-todo': 'onInputKeypress'
    };

    Header.prototype.onInputKeypress = function(e) {
      var ENTER_KEY, todoText;
      ENTER_KEY = 13;
      todoText = this.ui.input.val().trim();
      if (e.which === ENTER_KEY && todoText) {
        return this.createTodo(todoText);
      }
    };

    Header.prototype.completeAdd = function() {
      return this.ui.input.val('');
    };

    Header.prototype.createTodo = function(todoText) {
      if (todoText.trim() === '') {
        return;
      }
      this.collection.create({
        title: todoText
      });
      return this.completeAdd();
    };

    return Header;

  })(Backbone.Marionette.ItemView);
  return Layout.Footer = (function(_super) {
    __extends(Footer, _super);

    function Footer() {
      return Footer.__super__.constructor.apply(this, arguments);
    }

    Footer.prototype.template = '#template-footer';

    Footer.prototype.ui = {
      filters: '#filters a'
    };

    Footer.prototype.events = {
      'click #clear-completed': 'onClearClick'
    };

    Footer.prototype.collectionEvents = {
      'all': 'render'
    };

    Footer.prototype.templateHelpers = {
      activeCountLabel: function() {
        return (this.activeCount === 1 ? 'item' : 'items') + 'left';
      }
    };

    Footer.prototype.initialize = function() {
      return this.listenTo(App.vent, 'todoList:filter', this.updateFilterSelection, this);
    };

    Footer.prototype.serializeData = function() {
      var active, total;
      active = this.collection.getActive().length;
      total = this.collection.length;
      return {
        activeCount: active,
        totalCount: total,
        completedCount: total - active
      };
    };


    Footer.prototype.onRender = function() {
      this.$el.parent().toggle(this.collection.length > 0);
      return this.updateFilterSelection();
    };

    Footer.prototype.updateFilterSelection = function() {
      return this.ui.filters.removeClass('selected').filter('[hres="' + (location.hash || '#') + '"]').addClass('selected');
    };

    Footer.prototype.onClearClick = function() {
      var completed;
      completed = this.collection.getCompleted();
      return completed.forEach(function(todo) {
        return todo.destroy();
      });
    };

    return Footer;

  })(Backbone.Marionette.ItemView);
});
